export default {
  localeSwitcher: {
    switch0: 'Switch language',
  },

  about: {
    aboutThisTool: 'About This Tool',
    introduce: 'Introduction',
    introduce1: 'Auto I18n, short for Auto Internationalization',
    introduce2: 'aims to provide an automatic internationalization solution for projects, saving your time and improving development efficiency.',
    introduce3: 'This tool helps users more easily complete the internationalization of their projects, as well as the process of continuously updating internationalization for new pages. View more: ',
    docs: 'Docs',
    // boundedness: 'Limitations',
    // boundednessContent: 'Currently, AutoI18n mainly provides internationalization processing at the project integration and page tag text content level. However, due to the complexity of project internationalization and ongoing maintenance requirements, for user-specific internationalization customization needs, you may need to modify and process according to the next-intl documentation. More support will be added in future updates.',
    contactInformation: 'Contact Information',
    author: 'Author: Kamjin',
    supportEmail: 'Support Email:',
    useMustKnow: 'Usage Notice:',
    useMustKnowContent: 'Before using this service, please be sure to read the usage instructions. If you have any questions, please contact the author.',
    feedback: 'Feedback',
    feedbackContent1: 'If you have any questions or suggestions',
    feedbackLink: 'Click here to submit feedback/seek help',
    feedbackContent2: ', or find the feedback entry on the corresponding website:',
    showcase: 'ShowCase',
    showcaseContent1: 'If the tool has been helpful to you, you can',
    showcaseLink: 'click to submit',
    showcaseContent2: 'your website, or find the submission entry on the AutoI18n website üëáüèª',
    future: 'About Future Updates',
    futureContent: 'The tool\'s functionality will be continuously maintained with updates to NextJS official releases, and features may change. Please stay tuned to developer and website messages. More useful features or products will be launched in the future üëáüèª',
    relatedLinks: 'Related Links',
    sponsor: 'Sponsor',
    supportMySoloJourney: 'Support My Solo Journey!',
    Yoursupporthelpsmekeepde: 'Your support helps me keep developing and maintaining this project on my own. If you enjoy the work and want to help me continue creating and improving, consider buying me a little something. Every contribution, big or small, makes a huge difference and keeps the project alive. Thank you for your support and for being a part of this journey!',
    appInfo: 'Application Information',
    currentVersion: 'Current Version:',
    checkingUpdate: 'Checking for updates, if there are any, they will be downloaded automatically. Please wait...',
    getLatestVersion: 'Get Latest Version',
    copyright: 'Copyright ¬© {year} {author} | Auto I18n',
  },
  faqs: {
    title: 'Frequently Asked Questions',
    searchPlaceholder: 'Enter keywords to search for questions',
    q1: {
      question: 'What is the AutoI18n For NextJs tool?',
      answer1: 'AutoI18n For NextJs is a cross-platform developer assistance tool specifically designed to help developers with language integration, content translation, maintenance, and continuous incremental updates when using the Next.js framework (AppRouter version), saving certain maintenance costs. View more:',
      docs: 'Docs',
      answer2: 'The main purpose is to maximize the efficiency of i18n integration and maintenance for Next.js projects.',
      suitableProjects: 'Suitable Projects:',
      projectsAnswer: 'Frontend projects using the Next.js framework (AppRouter version) that have not manually integrated other multilingual solutions.',
      suitableUsers: 'Suitable Users:',
      usersAnswer: 'Users who want to reduce the cost and time of multilingual maintenance, or interested users. It can also be used to help quickly get started with multilingual NextJS projects.',
    },
    q2: {
      question: 'For initial integration, how can I know if the project\'s multilingual processing is successful without adding a language switching component?',
      answer: 'For example, if you checked Korean integration in the homepage\'s multilingual configuration, start the project, open the browser and visit http://localhost:3000/ko. If the page loads and displays language content at this time, it indicates successful integration and translation.',
    },
    q3: {
      question: 'How to get the current locale in a component?',
      clientComponent: 'In a client component:',
      serverComponent: 'In a server component:',
      tsxTitle: 'In TSX:',
      jsxTitle: 'In JSX:',
      note: 'Make sure to add a parameter named locale in the component parameters after processing through the homepage\'s static rendering configuration. If there\'s a compilation error for this parameter in TSX, you can add a type annotation (as shown below) or use a ts-ignore annotation to ignore it.',
      additionalNote: 'Additional Note:',
      additionalNoteContent: 'If the target component is referenced by other components rather than accessed through route navigation, the parameter named locale cannot be used normally. Please manually obtain the "locale" parameter in the parent component and pass it down as a prop.',
    },
    q4: {
      question: 'Why does the multilingual feature work successfully locally but fail to build in the production environment?',
      errorMessage: 'Common error: Error: Usage of next-intl APIs in Server Components currently opts into dynamic rendering. This limitation will eventually be lifted, but as a stopgap solution, you can use the unstable_setRequestLocale API to enable static rendering, see https://next-intl-docs.vercel.app/docs/getting-started/app-router-server-components#static-rendering',
      explanation: 'This error indicates that your server-side component is using dynamic rendering, but you haven\'t enabled static rendering for multilingual support. In the online environment, it cannot be pre-rendered, which will cause performance issues.',
      solutions: 'There are two solutions:',
      solution1: {
        title: 'Method 1:',
        content: 'Declare the current page as a client-side component with \'use client\' at the top. This will prevent the error, but all server-side code used in this component needs to be modified to work on the client side.',
      },
      solution2: {
        title: 'Method 2:',
        content: 'Explicitly declare \'use server\' at the top of the page, then add this line in the component: unstable_setRequestLocale(locale) to complete static rendering for multilingual support. You can refer to the LocaleLayout component code in [locale]/layout.tsx. You can also check the official explanation and documentation for static rendering: https://next-intl-docs.vercel.app/docs/getting-started/app-router/with-i18n-routing#static-rendering',
      },
      additionalNote: 'Additional Note:',
      additionalNoteContent: 'Some components are contained within other components but may also need multilingual support. The contained components will not be able to get the locale property through parameters, thus unable to enable static rendering. The solution is to obtain the property in the parent component and pass it down as a prop.',
    },
    q5: {
      question: 'How to skip multilingualization and translation of certain content?',
      method1: {
        title: 'Method 1:',
        content: 'Fill in the content you want to skip translation in the brand word configuration column on the homepage. For example, if your website is called foo, you can enter the word foo, so it will be replaced with an untranslatable symbol during translation to skip this content.',
      },
      method2: {
        title: 'Method 2:',
        content: 'You can wrap the text content in curly braces and double quotes, and it won\'t be parsed by the tool as content that needs translation',
      },
    },
    q6: {
      question: 'How to get the lang switching function?',
      introduction: 'You can implement the lang dropdown switching function with the following code. Introduce it into your project\'s unified navbar component and adjust the style and content according to your needs.',
      constantFile: 'First, you need to use the following multilingual constant file, which has been generated by the tool and can be found in the folder parallel to the app directory.',
      i18nMetadataTitle: '// i18n-metadata.ts',
      method1: {
        title: 'Method 1: Dropdown language switching (common)',
        description: 'Create a component for dropdown language switching, and introduce this component into the component you need, such as your Header or other components for display.',
      },
      method2: {
        title: 'Method 2: Flat language selection and switching',
        description: 'Create a component for flat multilingual display, and introduce this component into the component you need, such as your Footer component or other components for display.',
      },
    },
    q7: {
      question: 'How to solve the issue where sometimes switching languages doesn\'t take effect, and clicking to a new page still shows the original language?',
      explanation: 'The main reason is the priority of multilingual parsing in the next-intl framework, reference link: https://next-intl-docs.vercel.app/docs/routing/middleware#prefix-based-routing',
      solution1: {
        title: '(Recommended) Re-request the current address when switching languages',
        content: 'Essentially, this is to trigger the override of the multilingual identifier in the cookie of next-intl. For example, if you\'re currently visiting: /en/about, when switching to ja, simply request /ja/about again. This has already been done in langSwitcher and langExpands. You can refer to the documentation: https://next-intl-docs.vercel.app/docs/routing/middleware#prefix-based-routing',
      },
      solution2: {
        title: 'Use the "locale" attribute on the Link tag used for language switching',
        content: 'For example:',
        note: 'Note that you can\'t add this attribute to all Link tags, this approach is incorrect. You only need to add this attribute to the component used for language switching.',
      },
    },
    q8: {
      question: 'Why is some text not processed (not translated)?',
      reason1: 'When text is wrapped in curly braces as an expression, it won\'t be processed;',
      reason2: 'When the text inside a tag is purely symbols or whitespace characters, it won\'t be processed;',
      reason3: 'In some cases, when the text is not directly wrapped by a tag, it won\'t be processed;',
      example1: 'In the following example, Hello is considered not directly wrapped, which may lead to it not being processed:',
      solution: 'You can try adding a direct tag layer to the text, such as a p tag, and run the tool again, like this:',
    },
    q9: {
      question: 'How can I use this in combination with other middleware? (middleware.ts)',
      reason1: 'Introduction to middleware.ts: https://nextjs.org/docs/app/building-your-application/routing/middleware',
      reason2: 'Due to the number and logical complexity of various projects using different middleware, the writing method is not the same, you need to write their own combination of logic, here is a combination of next-intl and clerk middleware for reference, the code is as follows:',
      reason3: 'For other combinations of middleware, please refer to the official documentation: https://next-intl-docs.vercel.app/docs/routing/middleware#composing-other-middlewares',
    },
    additionalHelp: 'If there are still some unlisted issues, please',
    clickHere: 'click here',
    submitFeedback: 'to submit problem feedback to the developer.',
  },

  home: {
    title: 'Multi-language configurations',
    subtitle: 'Choose the right configuration for your project.' ,
    selectProjectRootPath: 'Select Project Root Path',
    noSelection: 'Not selected, historical configuration will be read after selection',
    selectFolder: 'Select Folder',
    defaultLanguage: 'Default Language',
    configureMultilingual: 'Configure Multilingual',
    multilingualTip: '[Note] Don\'t check too many for first use. The translation API has a minute-level rate limit. If the text volume is too large, it will fail and require a longer waiting time. The current program will update the asynchronous processing mechanism to fix this problem in the future. You only need to submit the task and wait. Initially, you can check one or two, then check more later, progressing gradually.',
    brandWords: 'Brand Words',
    brandWordsTip: 'Enter brand words that need to be filtered. Brand words will not be translated. For example, the name of the website generally doesn\'t need to be translated. Please use Enter to separate each brand word.',
    brandWordsPlaceholder: 'Enter brand words that need to be filtered. Brand words will not be translated. Separate with new lines.',
    unmovedFiles: 'Files or folders that don\'t need to be moved',
    unmovedFilesTip: 'Enter files or folders that don\'t need to be moved. By default, api and lib folders will not be moved. Some other files will not be moved, such as: layout.tsx, layout.jsx, layout.js, globals.css, global.css, robots.ts, robots.js, sitemap.ts, sitemap.js, favicon.ico, error.ts, error.tsx, error.js, error.jsx. These files are for providing some functionality rather than actual pages. The interface addresses of files providing REST interfaces usually need to be fixed, so they generally don\'t need to be moved to the [locale] folder. Please use Enter to separate each filename.',
    unmovedFilesPlaceholder: 'Enter files or folders that don\'t need to be moved, separated by new lines',
    translationOptions: 'Translation Options',
    select: 'Select',
    selectLabelsTip: 'Specify certain tags for translation. You only need to select the tags that need to be translated, including those that have been processed or new ones. Translated tags will be merged into the translation file.',
    openEditor: 'Open Editor',
    incremental: 'Incremental (Default)',
    incrementalTip: 'Only perform incremental translation on new content, without re-translating previously translated content. It\'s also suitable for use after manually calibrating translated content. If you need to select certain content for translation, you need to use the "Open Editor" function to select the specific content to be translated.',
    full: 'Full',
    fullTip: 'Before using, please make sure you really need to translate everything in full. This will re-translate all other language content based on the default language content. Your manually changed translations will be overwritten. It may fail due to too many selections and the translation API rate limit. The current program will update the asynchronous processing mechanism to fix this problem in the future.',
    integrationOptions: 'Integration Options',
    reIntegrateNextIntl: 'Re-integrate NextIntl',
    reIntegrateNextIntlTip: 'Suitable for new projects that haven\'t integrated next-intl before. New projects will be selected by default. Can be used to fix incorrect next-intl integration. Integration means overwriting various i18n-related files such as i18n.ts, middleware.ts, layoutx.ts, and moving page files, so you need to ensure the code has been committed before selecting this option. Also, this option is not suitable for projects that have manually integrated next-intl. [Note] Not all projects can be integrated, it supports integration of NextJs projects using the AppRouter version.',
    enableStaticRendering: 'Enable Static Rendering',
    enableStaticRenderingTip: 'Enable static rendering of i18n for server-side rendered components. Next-intl officially states that the current solution is not a stable version and may lack some support. It\'s recommended to enable it when encountering problems. Detailed official documentation: https://next-intl-docs.vercel.app/docs/getting-started/app-router#static-rendering',
    enableSubPageRedirect: 'Enable Subpage Locale Redirect',
    enableSubPageRedirectTip: '[Recommended to enable] For example, visiting /about will redirect to /en/about. Detailed official documentation: https://next-intl-docs.vercel.app/docs/routing/middleware#matcher-no-prefix',
    disableDefaultLangRedirect: 'Disable Default Language Redirect',
    disableDefaultLangRedirectTip: '[Recommended to enable] This is to avoid forced redirection of the default language if the current site already has SEO rankings. This can prevent affecting existing SEO page indexing and ranking. Detailed official documentation: https://next-intl-docs.vercel.app/docs/routing/middleware#locale-prefix-always',
    submit: 'Submit',
    preview: 'Interface Preview',
    tip: 'View',
    faqsLink: 'FAQs',
    tipTitle: 'Tip',
    tipEnd: ', to introduce components for switching languages on the page;',
    resultPlaceholder: 'Processing results will be displayed here',
  },
  localeJsonEdit: {
    title:'Multi-language editor',
    tipTitle: 'Tips:',
    tip1: 'Check, or click on labels or content to edit. After submission, it will be uniformly updated to the json files of other languages.',
    tip2: 'Using the current tool to change labels and content can maintain consistency of labels and content.',
    tip3: 'Temporarily save through the "Confirm Selection or Edit" button at the bottom of the page.',
    undo: 'Undo',
    redo: 'Redo',
    reset: 'Reset',
    searchPlaceholder: 'Search by keyword',
    selection: 'Selection',
    key: 'Key',
    value: 'Value',
    confirmButton: 'Confirm Selection or Edit',
  },
  sidebar: {
    project: 'Project',
    multilanguageEditor: 'Multilanguage Editor',
    faqs: 'FAQs',
    about: 'About',
  },
  userAgreeTips: {
    usageNotice: 'Usage Notice',
    viewAndAgree: 'View Usage Notice and Agree',
    welcome: 'Welcome to AutoI18n For NextJs',
    toolIntro: 'Brief introduction to this tool\'s features',
    feature1: 'One-click integration of i18n internationalization for NextJs projects, saving you the trouble of consulting documentation and choosing technical solutions, thus saving time on internationalization integration.',
    feature2: 'Supports adding internationalization to newly written code, reducing subsequent project maintenance costs and errors that may be caused by manual maintenance.',
    feature3: 'Supports configuring multiple languages, custom brand word filtering, enabling static rendering, enabling subpage locale redirects, and other functions to customize i18n options for different scenarios according to project requirements.',
    mainPurpose: 'The main purpose is to maximize the efficiency of i18n integration and maintenance for Next.js projects.',
    systemRequirements: 'System and Project Requirements',
    requirement1: 'Please confirm that the current project is the AppRouter version of NextJs. You can confirm this by checking if the folder containing the source code is "app" instead of "pages". For details, please check: ',
    requirement2: 'To avoid confusion, please confirm that you haven\'t manually integrated other frameworks such as react-intl, react-i18next, lingui, rosetta, next-intl, next-translate, next-multilingual, tolgee, inlang into your project before. The current tool is based on next-intl integrated into your project.',
    developerSuggestions: 'Developer Suggestions',
    suggestion1: 'Before using this tool, commit your local code once through version control tools and upload it to the cloud, so that you can roll back in case of unexpected situations.',
    suggestion2: 'If you haven\'t dealt with frontend project internationalization before, it\'s recommended that you first understand the concept of internationalization and some documentation, such as checking the documentation of next-intl used by this tool for internationalization selection: ',
    suggestion3: 'What you need to know is that achieving perfect internationalization support is a delicate and complex task. When your requirements are complex or the current tool doesn\'t support a certain function, you can usually prioritize checking the official documentation and searching for related functions: ',
    suggestion3Cont: ', if you still have no clue, you can contact the author of this tool for possible further support.',
    developerStatement: 'Developer Statement',
    statement1: 'This tool requires internet connection to use, and its functions include translation, updates, and possible auxiliary functions and usage permission verification.',
    statement2: 'If there is a distribution need for this tool, the author\'s consent is required. Please contact via email: ',
    statement3: 'The final interpretation of this tool belongs to KAMJIN, the developer of AutoI18n For NextJs tool. It is strictly prohibited to use this tool for any illegal projects, including but not limited to infringement of other people\'s rights, violation of laws and regulations of the activities. Any violation of this statement will be subject to legal liability.',
    statement4: 'This tool guarantees not to collect any personal or project information. All generated data is stored locally and no upload actions related to your project and personal data are performed.',
    statement5: 'This tool is still in the development stage and may have some errors or functions that cannot be used normally. You can contact via email: ',
    statement5Cont: ', so that it can be resolved in subsequent updated versions.',
    statement6: 'It is strongly recommended that you ensure that you have committed or manually saved and backed up your code before performing any operations with this tool to avoid a series of losses such as code loss or conflicts.',
    statement7: 'The developer of this tool is not responsible for any mistakes caused by your failure to commit or save code.',
    finalNote: 'Please read the above content carefully. If you agree with the above content, please click the agree button; otherwise, please click the reject button.',
    agree: 'Agree',
    reject: 'Reject',
  },
};
